{"ast":null,"code":"import { get, getDatabase, child, ref, update, set, onValue, remove } from \"firebase/database\";\nimport { initializeApp, getApps, getApp } from \"firebase/app\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyCiGtA9NHnFJ4TN1PxAbDgHl7UXfcjMoRM\",\n  authDomain: \"scheduleasy-d17f5.firebaseapp.com\",\n  projectId: \"scheduleasy-d17f5\",\n  storageBucket: \"scheduleasy-d17f5.appspot.com\",\n  messagingSenderId: \"645588070028\",\n  appId: \"1:645588070028:web:b8d041823b7e552c9995a9\"\n};\n\nfunction generateId() {\n  var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var token = \"\";\n\n  for (var i = 0; i < 28; i++) {\n    token += chars[Math.floor(Math.random() * chars.length)];\n  }\n\n  return token;\n}\n\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst db = getDatabase(app);\nexport class DatabaseHandler {\n  static registerUserData(userId, userName, email, birthDate, majority) {\n    set(ref(this.database, \"users/\" + userId), {\n      userName: userName,\n      email: email,\n      birthDate: birthDate,\n      majority: majority\n    });\n    set(ref(this.database, \"userNames/\" + userName), {\n      uid: userId\n    });\n  }\n\n  static createEvent(allEventInfo) {\n    //participant nodes is being pushed under the eventId node. it must be deleted\n    const event_Id = generateId();\n    console.log(allEventInfo);\n    const db_event_node = {};\n    const db_event_participants = {};\n    const db_options = {};\n    allEventInfo.options.forEach((opt, index) => db_options[index] = opt);\n    allEventInfo.options = db_options;\n    console.log(allEventInfo.participants);\n    set(ref(this.database, \"events/\" + event_Id), allEventInfo);\n    set(ref(this.database, \"userEvents/\" + allEventInfo.creatorName + \"/\" + event_Id), true);\n    db_event_participants[allEventInfo.creatorName] = true;\n    Object.values(allEventInfo.participants).forEach(participant => {\n      db_event_participants[participant] = true;\n      set(ref(this.database, \"userEvents/\" + participant + \"/\" + event_Id), true);\n    });\n    set(ref(this.database, \"participantsOfEvent/\" + event_Id), db_event_participants); // Wrong must be {huxies:true} but {0:true}\n    //it could be addUserToEvent(userName) func to call here to be more modular for the incoming invitations\n  }\n\n  static async getUserVote(eventId, username) {\n    var res = (await get(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username))).val();\n    var returnedList = [];\n\n    if (res != null) {\n      res.forEach(vote => {\n        if (vote != \"\") {\n          returnedList.push(vote);\n        }\n      });\n    }\n\n    return returnedList;\n  }\n\n  static async getUserName(userId) {\n    let userName = (await get(child(ref(this.database), `users/${userId}/userName`))).val();\n    console.log(userName, \"dbhandler\");\n    return userName;\n  }\n\n  static async isUserExist(userName) {\n    let exists = (await get(child(ref(this.database), `userNames/${userName}`))).val();\n\n    if (exists === null) {\n      return false;\n    }\n\n    return exists.uid; // it might return true take a look at later\n  }\n\n  static async getUserEventIds(userName) {\n    let events = (await get(child(ref(this.database), `userEvents/${userName}`))).val();\n    return Object.keys(events);\n  }\n\n  static deleteEvent(eventId) {\n    // Assuming that events are stored under 'events' node in the database\n    const eventRef = ref(db, 'events/' + eventId);\n    remove(eventRef).then(() => {\n      console.log(\"Event removed successfully\");\n    }).catch(error => {\n      console.error(\"Error removing event: \", error);\n    });\n  }\n\n  static async getEventInfo(eventId) {\n    const eventSnapshot = await get(child(ref(this.database), `events/${eventId}`));\n    const eventInfo = eventSnapshot.val(); // If the event is public, get all userNames, else get only the participants of the event\n\n    let participantsNode;\n\n    if (eventInfo.privacy === \"Public\") {\n      participantsNode = `userNames`;\n    } else {\n      participantsNode = `participantsOfEvent/${eventId}`;\n    }\n\n    const participantsSnapshot = await get(child(ref(this.database), participantsNode));\n    const participants = participantsSnapshot.val();\n    eventInfo.participants = participants;\n    eventInfo.id = eventId;\n    return eventInfo;\n  }\n\n  static async listenEventOptions(eventId, setState) {\n    onValue(ref(this.database, \"events/\" + eventId + \"/options\"), snapshot => {\n      const data = snapshot.val();\n      data.map((opt, index) => opt[\"id\"] = index);\n      console.log(data);\n      setState(data);\n    });\n  }\n\n  static async setCustomDateOption(eventId, options, incomingOptions) {\n    var index = options.length;\n\n    for (var i in [...Array(incomingOptions.length).keys()]) {\n      console.log(i);\n      await set(ref(this.database, \"events/\" + eventId + \"/options/\" + `${index + +i}`), incomingOptions[i]);\n    }\n  }\n\n  static async getUserEventInfos(userName) {\n    // Get the list of eventIds that the user is a part of\n    let event_ids = Object.keys((await get(child(ref(this.database), `userEvents/${userName}`))).val()); // Convert the list of ids to a list of event info Promises\n\n    let event_info_promises = event_ids.map(eventId => this.getEventInfo(eventId)); // Wait for all the Promises to resolve and return the event info list\n\n    let events_info = await Promise.all(event_info_promises);\n    return events_info;\n  }\n\n  static async leaveEvent(eventId, username) {\n    set(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username), {});\n    set(ref(this.database, \"userEvents/\" + username + \"/\" + eventId), {});\n  }\n\n  static async endEvent(event_Id, optionId) {\n    set(ref(this.database, \"events/\" + event_Id + \"/isOpen\"), false);\n    set(ref(this.database, \"events/\" + event_Id + \"/endOptionId\"), optionId);\n  }\n\n  static async submitVote(eventId, userName, votes) {\n    for (const date of Object.keys(votes)) {\n      console.log(`id : ${date} -> vote : ${votes[date]}`);\n      await set(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + userName + \"/\" + date), votes[date]);\n    }\n  }\n\n  static async getVotes(eventId) {\n    let votes = (await get(child(ref(this.database), \"participantsOfEvent/\" + eventId))).val();\n    let comings = {};\n    let Ncomings = {};\n    let ifNeed = {};\n\n    for (const user of Object.keys(votes)) {\n      try {\n        votes[user].forEach((opt, index) => {\n          //console.log(opt,index);\n          switch (opt) {\n            case \"Coming\":\n              try {\n                comings[index].push(user);\n              } catch {\n                comings[index] = [user];\n              }\n\n              break;\n\n            case \"Not\":\n              try {\n                Ncomings[index].push(user);\n              } catch {\n                Ncomings[index] = [user];\n              }\n\n              break;\n\n            case \"If need\":\n              try {\n                ifNeed[index].push(user);\n              } catch {\n                ifNeed[index] = [user];\n              }\n\n          }\n        });\n      } catch {}\n    }\n\n    return {\n      comings,\n      Ncomings,\n      ifNeed\n    };\n  }\n\n}\nDatabaseHandler.database = getDatabase();","map":{"version":3,"sources":["C:/Users/Öykü/Desktop/CENG-416/src/database/DatabaseHandler.js"],"names":["get","getDatabase","child","ref","update","set","onValue","remove","initializeApp","getApps","getApp","firebaseConfig","apiKey","authDomain","projectId","storageBucket","messagingSenderId","appId","generateId","chars","token","i","Math","floor","random","length","app","db","DatabaseHandler","registerUserData","userId","userName","email","birthDate","majority","database","uid","createEvent","allEventInfo","event_Id","console","log","db_event_node","db_event_participants","db_options","options","forEach","opt","index","participants","creatorName","Object","values","participant","getUserVote","eventId","username","res","val","returnedList","vote","push","getUserName","isUserExist","exists","getUserEventIds","events","keys","deleteEvent","eventRef","then","catch","error","getEventInfo","eventSnapshot","eventInfo","participantsNode","privacy","participantsSnapshot","id","listenEventOptions","setState","snapshot","data","map","setCustomDateOption","incomingOptions","Array","getUserEventInfos","event_ids","event_info_promises","events_info","Promise","all","leaveEvent","endEvent","optionId","submitVote","votes","date","getVotes","comings","Ncomings","ifNeed","user"],"mappings":"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","sourcesContent":["import {\n  get,\n  getDatabase,\n  child,\n  ref,\n  update,\n  set,\n  onValue,\n  remove,\n\n} from \"firebase/database\";\nimport { initializeApp,getApps,getApp } from \"firebase/app\";\n\nconst firebaseConfig = {\n\n  apiKey: \"AIzaSyCiGtA9NHnFJ4TN1PxAbDgHl7UXfcjMoRM\",\n\n  authDomain: \"scheduleasy-d17f5.firebaseapp.com\",\n\n  projectId: \"scheduleasy-d17f5\",\n\n  storageBucket: \"scheduleasy-d17f5.appspot.com\",\n\n  messagingSenderId: \"645588070028\",\n\n  appId: \"1:645588070028:web:b8d041823b7e552c9995a9\"\n\n};\nfunction generateId() {\n  var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var token = \"\";\n  for (var i = 0; i < 28; i++) {\n    token += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return token;\n}\nconst app = !getApps().length ? initializeApp(firebaseConfig) : getApp();\nconst db = getDatabase(app);\nexport class DatabaseHandler {\n  static database = getDatabase();\n\n  static registerUserData(userId, userName, email, birthDate, majority) {\n    set(ref(this.database, \"users/\" + userId), {\n      userName: userName,\n      email: email,\n      birthDate: birthDate,\n      majority: majority,\n    });\n    set(ref(this.database, \"userNames/\" + userName), { uid: userId });\n  }\n\n\n  static createEvent(allEventInfo) {\n    //participant nodes is being pushed under the eventId node. it must be deleted\n\n    const event_Id = generateId();\n    console.log(allEventInfo);\n    const db_event_node = {};\n    const db_event_participants = {};\n\n    const db_options = {};\n\n    allEventInfo.options.forEach((opt, index) => db_options[index] = opt);\n    allEventInfo.options = db_options;\n    console.log(allEventInfo.participants)\n    set(ref(this.database, \"events/\" + event_Id), allEventInfo);\n\n    set(\n      ref(\n        this.database,\n        \"userEvents/\" + allEventInfo.creatorName + \"/\" + event_Id\n      ),\n      true\n    );\n    db_event_participants[allEventInfo.creatorName] = true;\n    Object.values(allEventInfo.participants).forEach((participant) => {\n      db_event_participants[participant] = true;\n      set(\n        ref(this.database, \"userEvents/\" + participant + \"/\" + event_Id),\n        true\n      );\n    });\n\n    set(\n      ref(this.database, \"participantsOfEvent/\" + event_Id),\n      db_event_participants\n    ); // Wrong must be {huxies:true} but {0:true}\n    //it could be addUserToEvent(userName) func to call here to be more modular for the incoming invitations\n  }\n\n  static async getUserVote(eventId,username){\n      var res =  (await (get(ref(this.database,\"participantsOfEvent/\"+eventId +\"/\"+username)))).val()\n      var returnedList = [];\n      if (res!=null){\n        res.forEach((vote)=> {\n          if(vote != \"\"){\n            returnedList.push(vote);\n          }\n        })\n      }\n      \n      return returnedList\n    }\n\n  static async getUserName(userId) {\n    let userName = (\n      await get(child(ref(this.database), `users/${userId}/userName`))\n    ).val();\n    console.log(userName, \"dbhandler\");\n    return userName;\n  }\n\n  static async isUserExist(userName) {\n    let exists = (\n      await get(child(ref(this.database), `userNames/${userName}`))\n    ).val();\n    if (exists === null) {\n      return false;\n    }\n    return exists.uid; // it might return true take a look at later\n  }\n\n  static async getUserEventIds(userName) {\n    let events = (\n      await get(child(ref(this.database), `userEvents/${userName}`))\n    ).val();\n    return Object.keys(events);\n  }\n\n  static deleteEvent(eventId) {\n    // Assuming that events are stored under 'events' node in the database\n    const eventRef = ref(db, 'events/' + eventId);\n    remove(eventRef)\n      .then(() => {\n        console.log(\"Event removed successfully\");\n      })\n      .catch((error) => {\n        console.error(\"Error removing event: \", error);\n      });\n  }\n\n\n  static async getEventInfo(eventId) {\n    const eventSnapshot = await get(child(ref(this.database), `events/${eventId}`));\n    const eventInfo = eventSnapshot.val();\n  \n    // If the event is public, get all userNames, else get only the participants of the event\n    let participantsNode;\n    if (eventInfo.privacy === \"Public\") {\n      participantsNode = `userNames`;\n    } else {\n      participantsNode = `participantsOfEvent/${eventId}`;\n    }\n  \n    const participantsSnapshot = await get(child(ref(this.database), participantsNode));\n    const participants = participantsSnapshot.val();\n    eventInfo.participants = participants;\n  \n    eventInfo.id = eventId;\n  \n    return eventInfo;\n  }\n  \n  \n  static async listenEventOptions(eventId,setState) {\n    onValue(ref(this.database, \"events/\" + eventId + \"/options\"), (snapshot) => {\n      const data = snapshot.val();\n      data.map((opt, index) => (opt[\"id\"] = index));\n      console.log(data);\n      setState(data);\n    });\n  }\n  static async setCustomDateOption(eventId,options,incomingOptions){\n    var index = options.length\n    \n    for(var i in [...Array(incomingOptions.length).keys()]){\n      console.log(i)\n      await set(ref(this.database,\"events/\" + eventId + \"/options/\" + `${index + (+i)}`),incomingOptions[i])\n    }\n\n    \n  }\n  static async getUserEventInfos(userName) {\n    // Get the list of eventIds that the user is a part of\n    let event_ids = Object.keys(\n      (await get(child(ref(this.database), `userEvents/${userName}`))).val()\n    );\n    \n    // Convert the list of ids to a list of event info Promises\n    let event_info_promises = event_ids.map(eventId => this.getEventInfo(eventId));\n    \n    // Wait for all the Promises to resolve and return the event info list\n    let events_info = await Promise.all(event_info_promises);\n    \n    return events_info;\n  }\n  \n\n  static async leaveEvent(eventId, username) {\n    set(\n      ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username),\n      {}\n    );\n    set(ref(this.database, \"userEvents/\" + username + \"/\" + eventId), {});\n  }\n\n  static async endEvent(event_Id,optionId){\n     set(ref(this.database,\"events/\"+ event_Id + \"/isOpen\"),false);\n     set(ref(this.database,\"events/\"+ event_Id + \"/endOptionId\"),optionId);\n  }\n\n  static async submitVote(eventId, userName, votes) {\n    for (const date of Object.keys(votes)) {\n      console.log(`id : ${date} -> vote : ${votes[date]}`)\n      await set(\n        ref(\n          this.database,\n          \"participantsOfEvent/\" + eventId + \"/\" + userName + \"/\" + date\n        ),\n        votes[date]\n      );\n    }\n  }\n\n  static async getVotes(eventId) {\n    let votes = (\n      await get(child(ref(this.database), \"participantsOfEvent/\" + eventId))\n    ).val();\n    let comings = {};\n    let Ncomings = {};\n    let ifNeed = {};\n    for (const user of Object.keys(votes)) {\n      try {\n        votes[user].forEach((opt, index) => {\n          //console.log(opt,index);\n          switch (opt) {\n            case \"Coming\":\n              try {\n                comings[index].push(user);\n              } catch {\n                comings[index] = [user];\n              }\n\n              break;\n            case \"Not\":\n              try {\n                Ncomings[index].push(user);\n              } catch {\n                Ncomings[index] = [user];\n              }\n\n              break;\n            case \"If need\":\n              try {\n                ifNeed[index].push(user);\n              } catch {\n                ifNeed[index] = [user];\n              }\n          }\n        });\n      } catch {}\n    }\n\n    return { comings, Ncomings, ifNeed };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}