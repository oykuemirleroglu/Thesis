{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _time = require(\"./time\");\n/*\n\tmodule assumes 24h format\n*/\n\n\nfunction parseTime(time) {\n  const match = time.match(_time.TIME_PARSE_24);\n\n  if (!match) {\n    throw new Error('Could not parse time for disabled time range');\n  }\n\n  return {\n    hour: parseInt(match[1], 10),\n    minute: parseInt(match[2], 10)\n  };\n}\n\nfunction generateHourValidator(fromH, fromM, toH, toM) {\n  const minH = fromH;\n  const maxH = toH;\n  const isSameHour = fromH === toH;\n\n  if (fromH < toH || isSameHour && fromM < toM) {\n    // regular range\n    return hour => hour <= minH || hour >= maxH;\n  } // overnight range: fromH > toH || (isSameHour && fromM > toM)\n\n\n  return hour => hour <= minH && hour >= maxH;\n}\n\nfunction generateMinuteValidator(fromH, fromM, toH, toM, hourValidator) {\n  return (h, m) => {\n    // if hour is invalid, all minutes should be invalid\n    if (!hourValidator(h)) {\n      return false;\n    }\n\n    if (h === fromH) {\n      return m <= fromM;\n    } else if (h === toH) {\n      return m >= toM;\n    }\n\n    return true;\n  };\n}\n\nclass DisabledTimeRange {\n  constructor(from, to) {\n    const {\n      hour: fromH,\n      minute: fromM\n    } = parseTime(from);\n    const {\n      hour: toH,\n      minute: toM\n    } = parseTime(to);\n\n    if (fromH === toH && fromM === toM) {\n      throw new Error('invalid date range - same time');\n    }\n\n    this.validateHour = generateHourValidator(fromH, fromM, toH, toM);\n    this.validateMinute = generateMinuteValidator(fromH, fromM, toH, toM, this.validateHour);\n  }\n\n}\n\nexports.default = DisabledTimeRange;","map":{"version":3,"sources":["C:/Users/Öykü/Desktop/CENG-416/node_modules/react-timekeeper/lib/helpers/disable-time.js"],"names":["Object","defineProperty","exports","value","default","_time","require","parseTime","time","match","TIME_PARSE_24","Error","hour","parseInt","minute","generateHourValidator","fromH","fromM","toH","toM","minH","maxH","isSameHour","generateMinuteValidator","hourValidator","h","m","DisabledTimeRange","constructor","from","to","validateHour","validateMinute"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,OAAR,GAAkB,KAAK,CAAvB;;AAEA,IAAIC,KAAK,GAAGC,OAAO,CAAC,QAAD,CAAnB;AAEA;AACA;AACA;;;AACA,SAASC,SAAT,CAAmBC,IAAnB,EAAyB;AACvB,QAAMC,KAAK,GAAGD,IAAI,CAACC,KAAL,CAAWJ,KAAK,CAACK,aAAjB,CAAd;;AAEA,MAAI,CAACD,KAAL,EAAY;AACV,UAAM,IAAIE,KAAJ,CAAU,8CAAV,CAAN;AACD;;AAED,SAAO;AACLC,IAAAA,IAAI,EAAEC,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX,CADT;AAELK,IAAAA,MAAM,EAAED,QAAQ,CAACJ,KAAK,CAAC,CAAD,CAAN,EAAW,EAAX;AAFX,GAAP;AAID;;AAED,SAASM,qBAAT,CAA+BC,KAA/B,EAAsCC,KAAtC,EAA6CC,GAA7C,EAAkDC,GAAlD,EAAuD;AACrD,QAAMC,IAAI,GAAGJ,KAAb;AACA,QAAMK,IAAI,GAAGH,GAAb;AACA,QAAMI,UAAU,GAAGN,KAAK,KAAKE,GAA7B;;AAEA,MAAIF,KAAK,GAAGE,GAAR,IAAeI,UAAU,IAAIL,KAAK,GAAGE,GAAzC,EAA8C;AAC5C;AACA,WAAOP,IAAI,IAAIA,IAAI,IAAIQ,IAAR,IAAgBR,IAAI,IAAIS,IAAvC;AACD,GARoD,CAQnD;;;AAGF,SAAOT,IAAI,IAAIA,IAAI,IAAIQ,IAAR,IAAgBR,IAAI,IAAIS,IAAvC;AACD;;AAED,SAASE,uBAAT,CAAiCP,KAAjC,EAAwCC,KAAxC,EAA+CC,GAA/C,EAAoDC,GAApD,EAAyDK,aAAzD,EAAwE;AACtE,SAAO,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACf;AACA,QAAI,CAACF,aAAa,CAACC,CAAD,CAAlB,EAAuB;AACrB,aAAO,KAAP;AACD;;AAED,QAAIA,CAAC,KAAKT,KAAV,EAAiB;AACf,aAAOU,CAAC,IAAIT,KAAZ;AACD,KAFD,MAEO,IAAIQ,CAAC,KAAKP,GAAV,EAAe;AACpB,aAAOQ,CAAC,IAAIP,GAAZ;AACD;;AAED,WAAO,IAAP;AACD,GAbD;AAcD;;AAED,MAAMQ,iBAAN,CAAwB;AACtBC,EAAAA,WAAW,CAACC,IAAD,EAAOC,EAAP,EAAW;AACpB,UAAM;AACJlB,MAAAA,IAAI,EAAEI,KADF;AAEJF,MAAAA,MAAM,EAAEG;AAFJ,QAGFV,SAAS,CAACsB,IAAD,CAHb;AAIA,UAAM;AACJjB,MAAAA,IAAI,EAAEM,GADF;AAEJJ,MAAAA,MAAM,EAAEK;AAFJ,QAGFZ,SAAS,CAACuB,EAAD,CAHb;;AAKA,QAAId,KAAK,KAAKE,GAAV,IAAiBD,KAAK,KAAKE,GAA/B,EAAoC;AAClC,YAAM,IAAIR,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,SAAKoB,YAAL,GAAoBhB,qBAAqB,CAACC,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBC,GAApB,CAAzC;AACA,SAAKa,cAAL,GAAsBT,uBAAuB,CAACP,KAAD,EAAQC,KAAR,EAAeC,GAAf,EAAoBC,GAApB,EAAyB,KAAKY,YAA9B,CAA7C;AACD;;AAjBqB;;AAqBxB7B,OAAO,CAACE,OAAR,GAAkBuB,iBAAlB","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _time = require(\"./time\");\n\n/*\n\tmodule assumes 24h format\n*/\nfunction parseTime(time) {\n  const match = time.match(_time.TIME_PARSE_24);\n\n  if (!match) {\n    throw new Error('Could not parse time for disabled time range');\n  }\n\n  return {\n    hour: parseInt(match[1], 10),\n    minute: parseInt(match[2], 10)\n  };\n}\n\nfunction generateHourValidator(fromH, fromM, toH, toM) {\n  const minH = fromH;\n  const maxH = toH;\n  const isSameHour = fromH === toH;\n\n  if (fromH < toH || isSameHour && fromM < toM) {\n    // regular range\n    return hour => hour <= minH || hour >= maxH;\n  } // overnight range: fromH > toH || (isSameHour && fromM > toM)\n\n\n  return hour => hour <= minH && hour >= maxH;\n}\n\nfunction generateMinuteValidator(fromH, fromM, toH, toM, hourValidator) {\n  return (h, m) => {\n    // if hour is invalid, all minutes should be invalid\n    if (!hourValidator(h)) {\n      return false;\n    }\n\n    if (h === fromH) {\n      return m <= fromM;\n    } else if (h === toH) {\n      return m >= toM;\n    }\n\n    return true;\n  };\n}\n\nclass DisabledTimeRange {\n  constructor(from, to) {\n    const {\n      hour: fromH,\n      minute: fromM\n    } = parseTime(from);\n    const {\n      hour: toH,\n      minute: toM\n    } = parseTime(to);\n\n    if (fromH === toH && fromM === toM) {\n      throw new Error('invalid date range - same time');\n    }\n\n    this.validateHour = generateHourValidator(fromH, fromM, toH, toM);\n    this.validateMinute = generateMinuteValidator(fromH, fromM, toH, toM, this.validateHour);\n  }\n\n}\n\nexports.default = DisabledTimeRange;"]},"metadata":{},"sourceType":"script"}