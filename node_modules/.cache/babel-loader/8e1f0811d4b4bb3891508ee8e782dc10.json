{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\n\nvar _react = require(\"react\");\n\nvar _useConfigContext = _interopRequireDefault(require(\"../hooks/useConfigContext\"));\n\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\n\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\n\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\n\nvar _useClockEvents = _interopRequireDefault(require(\"../hooks/useClockEvents\"));\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _useStateContext = _interopRequireDefault(require(\"../hooks/useStateContext\"));\n\nvar _jsxRuntime = require(\"@emotion/react/jsx-runtime\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction ClockWrapper() {\n  const config = (0, _useConfigContext.default)(); // clock events\n\n  const clock = (0, _react.useRef)(null);\n  const {\n    mode,\n    updateTimeValue\n  } = (0, _useStateContext.default)();\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n  const calculateTimeValue = (0, _react.useCallback)((angle, _ref) => {\n    let {\n      canAutoChangeMode = false,\n      wasTapped = false,\n      isInnerClick = false\n    } = _ref; // total number of allowable increments, 12/24 for hours, 60 for min\n\n    const totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    let minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n\n    const val = angle / 360 * totalIncrements;\n    let selected = Math.round(val / minIncrement) * minIncrement;\n    /*\n    \tnormalize value, acounts for angle that 12 is selected at, eg:\n    \t- if 12 clicked between 12 and 1, results in 0\n    \t- if 12 clicked between 11 and 12, results in 12\n    */\n\n    if ((0, _utils.isHourMode)(mode)) {\n      selected = selected % 12;\n    }\n\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      if (!isInnerClick) {\n        selected += 12;\n      } // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n\n\n      if (selected === 12) selected = 0;else if (selected === 0) selected = 12;\n    } // update time officially on timekeeper\n\n\n    updateTimeValue(selected, {\n      type: 'clock',\n      canAutoChangeMode\n    });\n  }, [config.forceCoarseMinutes, config.coarseMinutes, config.hour24Mode, mode, updateTimeValue]);\n  const {\n    bind\n  } = (0, _useClockEvents.default)(clock, calculateTimeValue);\n  return (0, _jsxRuntime.jsxs)(\"div\", { ...bind,\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default,\n    \"data-testid\": \"clock-wrapper\",\n    children: [(0, _jsxRuntime.jsx)(_Clock.default, {\n      clockEl: clock\n    }), !config.hour24Mode && (0, _jsxRuntime.jsx)(_Meridiems.default, {})]\n  });\n}","map":{"version":3,"sources":["C:/Users/Öykü/Desktop/CENG-416/node_modules/react-timekeeper/lib/components/ClockWrapper.js"],"names":["Object","defineProperty","exports","value","default","ClockWrapper","_react","require","_useConfigContext","_interopRequireDefault","_Clock","_Meridiems","_clockWrapper","_useClockEvents","_constants","_utils","_useStateContext","_jsxRuntime","obj","__esModule","config","clock","useRef","mode","updateTimeValue","calculateTimeValue","useCallback","angle","_ref","canAutoChangeMode","wasTapped","isInnerClick","totalIncrements","CLOCK_VALUES","increments","minIncrement","isMinuteMode","forceCoarseMinutes","coarseMinutes","val","selected","Math","round","isHourMode","MODE","HOURS_24","hour24Mode","type","bind","jsxs","className","css","children","jsx","clockEl"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = ClockWrapper;\n\nvar _react = require(\"react\");\n\nvar _useConfigContext = _interopRequireDefault(require(\"../hooks/useConfigContext\"));\n\nvar _Clock = _interopRequireDefault(require(\"./Clock\"));\n\nvar _Meridiems = _interopRequireDefault(require(\"./Meridiems\"));\n\nvar _clockWrapper = _interopRequireDefault(require(\"./styles/clock-wrapper\"));\n\nvar _useClockEvents = _interopRequireDefault(require(\"../hooks/useClockEvents\"));\n\nvar _constants = require(\"../helpers/constants\");\n\nvar _utils = require(\"../helpers/utils\");\n\nvar _useStateContext = _interopRequireDefault(require(\"../hooks/useStateContext\"));\n\nvar _jsxRuntime = require(\"@emotion/react/jsx-runtime\");\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction ClockWrapper() {\n  const config = (0, _useConfigContext.default)(); // clock events\n\n  const clock = (0, _react.useRef)(null);\n  const {\n    mode,\n    updateTimeValue\n  } = (0, _useStateContext.default)();\n  /*\n  \tLOGIC AROUND COARSE\n  \t- on drag, if count < 2, do not force coarse\n  \t- on mouseup, if count < 2 do not force coarse\n  \t- handlepoint\n  \t\t- if `wasTapped` OR `forceCoarse` config, then coarse it\n  \t- coarse is just rounding number to an increment before setting unit\n  \t\tLOGIC AROUND CAN CHANGE UNIT\n  \t- on drag, CAN NOT change unit\n  \t- on mouseup, can change unit\n  \t- AFTER time has been set, then determine if need to change unit\n  \t\t- based on this and user input\n  */\n\n  /*\n  \tconverts angle into time, also factors in any rounding to the closest increment\n  */\n\n  const calculateTimeValue = (0, _react.useCallback)((angle, _ref) => {\n    let {\n      canAutoChangeMode = false,\n      wasTapped = false,\n      isInnerClick = false\n    } = _ref;\n    // total number of allowable increments, 12/24 for hours, 60 for min\n    const totalIncrements = _constants.CLOCK_VALUES[mode].increments; // minimum increment used for rounding\n\n    let minIncrement = 1; // coarse minutes\n\n    if ((0, _utils.isMinuteMode)(mode) && (wasTapped || config.forceCoarseMinutes)) {\n      minIncrement = config.coarseMinutes;\n    }\n\n    const val = angle / 360 * totalIncrements;\n    let selected = Math.round(val / minIncrement) * minIncrement;\n    /*\n    \tnormalize value, acounts for angle that 12 is selected at, eg:\n    \t- if 12 clicked between 12 and 1, results in 0\n    \t- if 12 clicked between 11 and 12, results in 12\n    */\n\n    if ((0, _utils.isHourMode)(mode)) {\n      selected = selected % 12;\n    }\n\n    if (mode === _constants.MODE.HOURS_24 && config.hour24Mode) {\n      if (!isInnerClick) {\n        selected += 12;\n      } // fixes 12pm and midnight, both angle -> selected return 0\n      // for midnight need a final selected of 0, and for noon need 12\n\n\n      if (selected === 12) selected = 0;else if (selected === 0) selected = 12;\n    } // update time officially on timekeeper\n\n\n    updateTimeValue(selected, {\n      type: 'clock',\n      canAutoChangeMode\n    });\n  }, [config.forceCoarseMinutes, config.coarseMinutes, config.hour24Mode, mode, updateTimeValue]);\n  const {\n    bind\n  } = (0, _useClockEvents.default)(clock, calculateTimeValue);\n  return (0, _jsxRuntime.jsxs)(\"div\", { ...bind,\n    className: \"react-timekeeper__clock-wrapper\",\n    css: _clockWrapper.default,\n    \"data-testid\": \"clock-wrapper\",\n    children: [(0, _jsxRuntime.jsx)(_Clock.default, {\n      clockEl: clock\n    }), !config.hour24Mode && (0, _jsxRuntime.jsx)(_Meridiems.default, {})]\n  });\n}"]},"metadata":{},"sourceType":"script"}