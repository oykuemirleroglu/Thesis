{"ast":null,"code":"import { get, getDatabase, child, ref, update, set, onValue } from \"firebase/database\";\n\nfunction generateId() {\n  var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var token = \"\";\n\n  for (var i = 0; i < 28; i++) {\n    token += chars[Math.floor(Math.random() * chars.length)];\n  }\n\n  return token;\n}\n\nexport class DatabaseHandler {\n  static registerUserData(userId, userName, email, birthDate, majority) {\n    set(ref(this.database, \"users/\" + userId), {\n      userName: userName,\n      email: email,\n      birthDate: birthDate,\n      majority: majority\n    });\n    set(ref(this.database, \"userNames/\" + userName), {\n      uid: userId\n    });\n  }\n\n  static createEvent(allEventInfo) {\n    const event_Id = generateId();\n    const db_event_node = {};\n    const db_event_participants = {};\n    const db_options = {};\n    allEventInfo.options.forEach((opt, index) => db_options[index] = opt);\n    allEventInfo.options = db_options;\n    db_event_node[event_Id] = allEventInfo;\n    update(ref(this.database), db_event_node);\n    db_event_participants[allEventInfo.creatorName] = true;\n    Object.values(allEventInfo.participants).forEach(participant => {\n      db_event_participants[participant] = true;\n    });\n    set(ref(this.database, `participantsOfEvent/${event_Id}`), db_event_participants);\n  }\n\n  static async getUserVote(eventId, username) {\n    var res = (await get(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username))).val();\n    var returnedList = [];\n\n    if (res != null) {\n      res.forEach(vote => {\n        if (vote != \"\") {\n          returnedList.push(vote);\n        }\n      });\n    }\n\n    return returnedList;\n  }\n\n  static async getUserName(userId) {\n    let userName = (await get(child(ref(this.database), `users/${userId}/userName`))).val();\n    console.log(userName, \"dbhandler\");\n    return userName;\n  }\n\n  static async isUserExist(userName) {\n    let exists = (await get(child(ref(this.database), `userNames/${userName}`))).val();\n\n    if (exists === null) {\n      return false;\n    }\n\n    return exists.uid; // it might return true take a look at later\n  }\n\n  static async getUserEventIds(userName) {\n    let events = (await get(child(ref(this.database), `userEvents/${userName}`))).val();\n    return Object.keys(events);\n  }\n\n  static async getEventInfo(eventId) {\n    const eventSnapshot = await get(child(ref(this.database), `events/${eventId}`));\n    const eventInfo = eventSnapshot.val();\n    const participantsSnapshot = await get(child(ref(this.database), `participantsOfEvent/${eventId}`));\n    const participants = participantsSnapshot.val();\n    eventInfo.participants = participants;\n    eventInfo.id = eventId;\n    return eventInfo;\n  }\n\n  static async listenEventOptions(eventId, setState) {\n    onValue(ref(this.database, \"events/\" + eventId + \"/options\"), snapshot => {\n      const data = snapshot.val();\n      data.map((opt, index) => opt[\"id\"] = index);\n      console.log(data);\n      setState(data);\n    });\n  }\n\n  static async setCustomDateOption(eventId, options, incomingOptions) {\n    var index = options.length;\n\n    for (var i in [...Array(incomingOptions.length).keys()]) {\n      console.log(i);\n      await set(ref(this.database, \"events/\" + eventId + \"/options/\" + `${index + +i}`), incomingOptions[i]);\n    }\n  }\n\n  static async getUserEventInfos(userName) {\n    // critical\n    let event_ids = Object.keys((await get(child(ref(this.database), `userEvents/${userName}`))).val());\n    let events_info = [];\n    event_ids.forEach(eventId => events_info.push(this.getEventInfo(eventId))); ///events_info.forEach(event => console.log(event.title),\"asd\")\n\n    return events_info;\n  }\n\n  static async leaveEvent(eventId, username) {\n    set(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username), {});\n    set(ref(this.database, \"userEvents/\" + username + \"/\" + eventId), {});\n  }\n\n  static async endEvent(event_Id, optionId) {\n    set(ref(this.database, \"events/\" + event_Id + \"/isOpen\"), false);\n    set(ref(this.database, \"events/\" + event_Id + \"/endOptionId\"), optionId);\n  }\n\n  static async submitVote(eventId, userName, votes) {\n    for (const date of Object.keys(votes)) {\n      console.log(`id : ${date} -> vote : ${votes[date]}`);\n      await set(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + userName + \"/\" + date), votes[date]);\n    }\n  }\n\n  static async getVotes(eventId) {\n    let votes = (await get(child(ref(this.database), \"participantsOfEvent/\" + eventId))).val();\n    let comings = {};\n    let Ncomings = {};\n    let ifNeed = {};\n\n    for (const user of Object.keys(votes)) {\n      try {\n        votes[user].forEach((opt, index) => {\n          //console.log(opt,index);\n          switch (opt) {\n            case \"Coming\":\n              try {\n                comings[index].push(user);\n              } catch {\n                comings[index] = [user];\n              }\n\n              break;\n\n            case \"Not\":\n              try {\n                Ncomings[index].push(user);\n              } catch {\n                Ncomings[index] = [user];\n              }\n\n              break;\n\n            case \"If need\":\n              try {\n                ifNeed[index].push(user);\n              } catch {\n                ifNeed[index] = [user];\n              }\n\n          }\n        });\n      } catch {}\n    }\n\n    return {\n      comings,\n      Ncomings,\n      ifNeed\n    };\n  }\n\n}\nDatabaseHandler.database = getDatabase();","map":{"version":3,"sources":["C:/Users/Öykü/Desktop/CENG-416/src/database/DatabaseHandler.js"],"names":["get","getDatabase","child","ref","update","set","onValue","generateId","chars","token","i","Math","floor","random","length","DatabaseHandler","registerUserData","userId","userName","email","birthDate","majority","database","uid","createEvent","allEventInfo","event_Id","db_event_node","db_event_participants","db_options","options","forEach","opt","index","creatorName","Object","values","participants","participant","getUserVote","eventId","username","res","val","returnedList","vote","push","getUserName","console","log","isUserExist","exists","getUserEventIds","events","keys","getEventInfo","eventSnapshot","eventInfo","participantsSnapshot","id","listenEventOptions","setState","snapshot","data","map","setCustomDateOption","incomingOptions","Array","getUserEventInfos","event_ids","events_info","leaveEvent","endEvent","optionId","submitVote","votes","date","getVotes","comings","Ncomings","ifNeed","user"],"mappings":"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","sourcesContent":["import {\n  get,\n  getDatabase,\n  child,\n  ref,\n  update,\n  set,\n  onValue,\n\n} from \"firebase/database\";\n\nfunction generateId() {\n  var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var token = \"\";\n  for (var i = 0; i < 28; i++) {\n    token += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return token;\n}\n\nexport class DatabaseHandler {\n  static database = getDatabase();\n\n  static registerUserData(userId, userName, email, birthDate, majority) {\n    set(ref(this.database, \"users/\" + userId), {\n      userName: userName,\n      email: email,\n      birthDate: birthDate,\n      majority: majority,\n    });\n    set(ref(this.database, \"userNames/\" + userName), { uid: userId });\n  }\n\n  static createEvent(allEventInfo) {\n    const event_Id = generateId();\n    const db_event_node = {};\n    const db_event_participants = {};\n  \n    const db_options = {};\n  \n    allEventInfo.options.forEach((opt, index) => db_options[index] = opt);\n    allEventInfo.options = db_options;\n  \n    db_event_node[event_Id] = allEventInfo;\n    update(ref(this.database), db_event_node);\n  \n    db_event_participants[allEventInfo.creatorName] = true;\n    Object.values(allEventInfo.participants).forEach((participant) => {\n      db_event_participants[participant] = true;\n    });\n  \n    set(ref(this.database, `participantsOfEvent/${event_Id}`), db_event_participants);\n  }\n  \n  \n\n  static async getUserVote(eventId,username){\n      var res =  (await (get(ref(this.database,\"participantsOfEvent/\"+eventId +\"/\"+username)))).val()\n      var returnedList = [];\n      if (res!=null){\n        res.forEach((vote)=> {\n          if(vote != \"\"){\n            returnedList.push(vote);\n          }\n        })\n      }\n      \n      return returnedList\n    }\n\n  static async getUserName(userId) {\n    let userName = (\n      await get(child(ref(this.database), `users/${userId}/userName`))\n    ).val();\n    console.log(userName, \"dbhandler\");\n    return userName;\n  }\n\n  static async isUserExist(userName) {\n    let exists = (\n      await get(child(ref(this.database), `userNames/${userName}`))\n    ).val();\n    if (exists === null) {\n      return false;\n    }\n    return exists.uid; // it might return true take a look at later\n  }\n\n  static async getUserEventIds(userName) {\n    let events = (\n      await get(child(ref(this.database), `userEvents/${userName}`))\n    ).val();\n    return Object.keys(events);\n  }\n\n  static async getEventInfo(eventId) {\n    const eventSnapshot = await get(child(ref(this.database), `events/${eventId}`));\n    const eventInfo = eventSnapshot.val();\n  \n    const participantsSnapshot = await get(child(ref(this.database), `participantsOfEvent/${eventId}`));\n    const participants = participantsSnapshot.val();\n    eventInfo.participants = participants;\n  \n    eventInfo.id = eventId;\n  \n    return eventInfo;\n  }\n  \n  \n  \n  static async listenEventOptions(eventId,setState) {\n    onValue(ref(this.database, \"events/\" + eventId + \"/options\"), (snapshot) => {\n      const data = snapshot.val();\n      data.map((opt, index) => (opt[\"id\"] = index));\n      console.log(data);\n      setState(data);\n    });\n  }\n  static async setCustomDateOption(eventId,options,incomingOptions){\n    var index = options.length\n    \n    for(var i in [...Array(incomingOptions.length).keys()]){\n      console.log(i)\n      await set(ref(this.database,\"events/\" + eventId + \"/options/\" + `${index + (+i)}`),incomingOptions[i])\n    }\n\n    \n  }\n  static async getUserEventInfos(userName) {\n    // critical\n    let event_ids = Object.keys(\n      (await get(child(ref(this.database), `userEvents/${userName}`))).val()\n    );\n    let events_info = [];\n    event_ids.forEach((eventId) =>\n      events_info.push(this.getEventInfo(eventId))\n    );\n    ///events_info.forEach(event => console.log(event.title),\"asd\")\n    return events_info;\n  }\n\n  static async leaveEvent(eventId, username) {\n    set(\n      ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username),\n      {}\n    );\n    set(ref(this.database, \"userEvents/\" + username + \"/\" + eventId), {});\n  }\n\n  static async endEvent(event_Id,optionId){\n     set(ref(this.database,\"events/\"+ event_Id + \"/isOpen\"),false);\n     set(ref(this.database,\"events/\"+ event_Id + \"/endOptionId\"),optionId);\n  }\n\n  static async submitVote(eventId, userName, votes) {\n    for (const date of Object.keys(votes)) {\n      console.log(`id : ${date} -> vote : ${votes[date]}`)\n      await set(\n        ref(\n          this.database,\n          \"participantsOfEvent/\" + eventId + \"/\" + userName + \"/\" + date\n        ),\n        votes[date]\n      );\n    }\n  }\n\n  static async getVotes(eventId) {\n    let votes = (\n      await get(child(ref(this.database), \"participantsOfEvent/\" + eventId))\n    ).val();\n    let comings = {};\n    let Ncomings = {};\n    let ifNeed = {};\n    for (const user of Object.keys(votes)) {\n      try {\n        votes[user].forEach((opt, index) => {\n          //console.log(opt,index);\n          switch (opt) {\n            case \"Coming\":\n              try {\n                comings[index].push(user);\n              } catch {\n                comings[index] = [user];\n              }\n\n              break;\n            case \"Not\":\n              try {\n                Ncomings[index].push(user);\n              } catch {\n                Ncomings[index] = [user];\n              }\n\n              break;\n            case \"If need\":\n              try {\n                ifNeed[index].push(user);\n              } catch {\n                ifNeed[index] = [user];\n              }\n          }\n        });\n      } catch {}\n    }\n\n    return { comings, Ncomings, ifNeed };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}