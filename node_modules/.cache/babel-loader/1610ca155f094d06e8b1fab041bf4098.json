{"ast":null,"code":"import { get, getDatabase, child, ref, update, set, onValue } from \"firebase/database\";\n\nfunction generateId() {\n  var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var token = \"\";\n\n  for (var i = 0; i < 28; i++) {\n    token += chars[Math.floor(Math.random() * chars.length)];\n  }\n\n  return token;\n}\n\nexport class DatabaseHandler {\n  static registerUserData(userId, userName, email, birthDate, majority) {\n    set(ref(this.database, \"users/\" + userId), {\n      userName: userName,\n      email: email,\n      birthDate: birthDate,\n      majority: majority\n    });\n    set(ref(this.database, \"userNames/\" + userName), {\n      uid: userId\n    });\n  }\n\n  static createEvent(allEventInfo) {\n    //participant nodes is being pushed under the eventId node. it must be deleted\n    const event_Id = generateId();\n    console.log(allEventInfo);\n    const db_event_node = {};\n    const db_event_participants = {};\n    const db_options = {};\n    allEventInfo.options.forEach((opt, index) => db_options[index] = opt);\n    allEventInfo.options = db_options;\n    console.log(allEventInfo.participants);\n    set(ref(this.database, \"events/\" + event_Id), allEventInfo);\n    set(ref(this.database, \"userEvents/\" + allEventInfo.creatorName + \"/\" + event_Id), true);\n    db_event_participants[allEventInfo.creatorName] = true;\n    Object.values(allEventInfo.participants).forEach(participant => {\n      db_event_participants[participant] = true;\n      set(ref(this.database, \"userEvents/\" + participant + \"/\" + event_Id), true);\n    });\n    set(ref(this.database, \"participantsOfEvent/\" + event_Id), db_event_participants); // Wrong must be {huxies:true} but {0:true}\n    //it could be addUserToEvent(userName) func to call here to be more modular for the incoming invitations\n  }\n\n  static async getUserVote(eventId, username) {\n    var res = (await get(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username))).val();\n    var returnedList = [];\n\n    if (res != null) {\n      res.forEach(vote => {\n        if (vote != \"\") {\n          returnedList.push(vote);\n        }\n      });\n    }\n\n    return returnedList;\n  }\n\n  static async getUserName(userId) {\n    let userName = (await get(child(ref(this.database), `users/${userId}/userName`))).val();\n    console.log(userName, \"dbhandler\");\n    return userName;\n  }\n\n  static async isUserExist(userName) {\n    let exists = (await get(child(ref(this.database), `userNames/${userName}`))).val();\n\n    if (exists === null) {\n      return false;\n    }\n\n    return exists.uid; // it might return true take a look at later\n  }\n\n  static async getUserEventIds(userName) {\n    let events = (await get(child(ref(this.database), `userEvents/${userName}`))).val();\n    return Object.keys(events);\n  }\n\n  static deleteEvent(eventId, userName) {\n    return new Promise((resolve, reject) => {\n      // check if the event exists\n      const eventRef = firebase.database().ref('events/' + eventId);\n      eventRef.once('value', snapshot => {\n        if (snapshot.exists()) {\n          const event = snapshot.val(); // check if the user is the event's creator\n\n          if (event.creator === userName) {\n            // delete the event\n            eventRef.remove().then(() => {\n              resolve();\n            }).catch(error => {\n              console.error('Error deleting event:', error);\n              reject(error);\n            });\n          } else {\n            reject(new Error('User is not the event creator'));\n          }\n        } else {\n          reject(new Error('Event does not exist'));\n        }\n      });\n    });\n  }\n\n  static async getEventInfo(eventId) {\n    const eventSnapshot = await get(child(ref(this.database), `events/${eventId}`));\n    const eventInfo = eventSnapshot.val();\n\n    if (eventInfo.privacy === \"Public\") {\n      const participantsSnapshot = await get(child(ref(this.database), `userNames`));\n      const participants = participantsSnapshot.val();\n      eventInfo.participants = participants;\n    } else {\n      const participantsSnapshot = await get(child(ref(this.database), `participantsOfEvent/${eventId}`));\n      const participants = participantsSnapshot.val();\n      eventInfo.participants = participants;\n    }\n\n    eventInfo.id = eventId;\n    return eventInfo;\n  }\n\n  static async listenEventOptions(eventId, setState) {\n    onValue(ref(this.database, \"events/\" + eventId + \"/options\"), snapshot => {\n      const data = snapshot.val();\n      data.map((opt, index) => opt[\"id\"] = index);\n      console.log(data);\n      setState(data);\n    });\n  }\n\n  static async setCustomDateOption(eventId, options, incomingOptions) {\n    var index = options.length;\n\n    for (var i in [...Array(incomingOptions.length).keys()]) {\n      console.log(i);\n      await set(ref(this.database, \"events/\" + eventId + \"/options/\" + `${index + +i}`), incomingOptions[i]);\n    }\n  }\n\n  static async getUserEventInfos(userName) {\n    // critical\n    let event_ids = Object.keys((await get(child(ref(this.database), `userEvents/${userName}`))).val());\n    let events_info = [];\n    event_ids.forEach(eventId => events_info.push(this.getEventInfo(eventId))); ///events_info.forEach(event => console.log(event.title),\"asd\")\n\n    return events_info;\n  }\n\n  static async leaveEvent(eventId, username) {\n    set(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username), {});\n    set(ref(this.database, \"userEvents/\" + username + \"/\" + eventId), {});\n  }\n\n  static async endEvent(event_Id, optionId) {\n    set(ref(this.database, \"events/\" + event_Id + \"/isOpen\"), false);\n    set(ref(this.database, \"events/\" + event_Id + \"/endOptionId\"), optionId);\n  }\n\n  static async submitVote(eventId, userName, votes) {\n    for (const date of Object.keys(votes)) {\n      console.log(`id : ${date} -> vote : ${votes[date]}`);\n      await set(ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + userName + \"/\" + date), votes[date]);\n    }\n  }\n\n  static async getVotes(eventId) {\n    let votes = (await get(child(ref(this.database), \"participantsOfEvent/\" + eventId))).val();\n    let comings = {};\n    let Ncomings = {};\n    let ifNeed = {};\n\n    for (const user of Object.keys(votes)) {\n      try {\n        votes[user].forEach((opt, index) => {\n          //console.log(opt,index);\n          switch (opt) {\n            case \"Coming\":\n              try {\n                comings[index].push(user);\n              } catch {\n                comings[index] = [user];\n              }\n\n              break;\n\n            case \"Not\":\n              try {\n                Ncomings[index].push(user);\n              } catch {\n                Ncomings[index] = [user];\n              }\n\n              break;\n\n            case \"If need\":\n              try {\n                ifNeed[index].push(user);\n              } catch {\n                ifNeed[index] = [user];\n              }\n\n          }\n        });\n      } catch {}\n    }\n\n    return {\n      comings,\n      Ncomings,\n      ifNeed\n    };\n  }\n\n}\nDatabaseHandler.database = getDatabase();","map":{"version":3,"sources":["C:/Users/Öykü/Desktop/CENG-416/src/database/DatabaseHandler.js"],"names":["get","getDatabase","child","ref","update","set","onValue","generateId","chars","token","i","Math","floor","random","length","DatabaseHandler","registerUserData","userId","userName","email","birthDate","majority","database","uid","createEvent","allEventInfo","event_Id","console","log","db_event_node","db_event_participants","db_options","options","forEach","opt","index","participants","creatorName","Object","values","participant","getUserVote","eventId","username","res","val","returnedList","vote","push","getUserName","isUserExist","exists","getUserEventIds","events","keys","deleteEvent","Promise","resolve","reject","eventRef","firebase","once","snapshot","event","creator","remove","then","catch","error","Error","getEventInfo","eventSnapshot","eventInfo","privacy","participantsSnapshot","id","listenEventOptions","setState","data","map","setCustomDateOption","incomingOptions","Array","getUserEventInfos","event_ids","events_info","leaveEvent","endEvent","optionId","submitVote","votes","date","getVotes","comings","Ncomings","ifNeed","user"],"mappings":"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","sourcesContent":["import {\n  get,\n  getDatabase,\n  child,\n  ref,\n  update,\n  set,\n  onValue,\n\n} from \"firebase/database\";\n\nfunction generateId() {\n  var chars = \"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\";\n  var token = \"\";\n  for (var i = 0; i < 28; i++) {\n    token += chars[Math.floor(Math.random() * chars.length)];\n  }\n  return token;\n}\n\nexport class DatabaseHandler {\n  static database = getDatabase();\n\n  static registerUserData(userId, userName, email, birthDate, majority) {\n    set(ref(this.database, \"users/\" + userId), {\n      userName: userName,\n      email: email,\n      birthDate: birthDate,\n      majority: majority,\n    });\n    set(ref(this.database, \"userNames/\" + userName), { uid: userId });\n  }\n\n\n  static createEvent(allEventInfo) {\n    //participant nodes is being pushed under the eventId node. it must be deleted\n\n    const event_Id = generateId();\n    console.log(allEventInfo);\n    const db_event_node = {};\n    const db_event_participants = {};\n\n    const db_options = {};\n\n    allEventInfo.options.forEach((opt, index) => db_options[index] = opt);\n    allEventInfo.options = db_options;\n    console.log(allEventInfo.participants)\n    set(ref(this.database, \"events/\" + event_Id), allEventInfo);\n\n    set(\n      ref(\n        this.database,\n        \"userEvents/\" + allEventInfo.creatorName + \"/\" + event_Id\n      ),\n      true\n    );\n    db_event_participants[allEventInfo.creatorName] = true;\n    Object.values(allEventInfo.participants).forEach((participant) => {\n      db_event_participants[participant] = true;\n      set(\n        ref(this.database, \"userEvents/\" + participant + \"/\" + event_Id),\n        true\n      );\n    });\n\n    set(\n      ref(this.database, \"participantsOfEvent/\" + event_Id),\n      db_event_participants\n    ); // Wrong must be {huxies:true} but {0:true}\n    //it could be addUserToEvent(userName) func to call here to be more modular for the incoming invitations\n  }\n\n  static async getUserVote(eventId,username){\n      var res =  (await (get(ref(this.database,\"participantsOfEvent/\"+eventId +\"/\"+username)))).val()\n      var returnedList = [];\n      if (res!=null){\n        res.forEach((vote)=> {\n          if(vote != \"\"){\n            returnedList.push(vote);\n          }\n        })\n      }\n      \n      return returnedList\n    }\n\n  static async getUserName(userId) {\n    let userName = (\n      await get(child(ref(this.database), `users/${userId}/userName`))\n    ).val();\n    console.log(userName, \"dbhandler\");\n    return userName;\n  }\n\n  static async isUserExist(userName) {\n    let exists = (\n      await get(child(ref(this.database), `userNames/${userName}`))\n    ).val();\n    if (exists === null) {\n      return false;\n    }\n    return exists.uid; // it might return true take a look at later\n  }\n\n  static async getUserEventIds(userName) {\n    let events = (\n      await get(child(ref(this.database), `userEvents/${userName}`))\n    ).val();\n    return Object.keys(events);\n  }\n\n  static deleteEvent(eventId, userName) {\n    return new Promise((resolve, reject) => {\n      // check if the event exists\n      const eventRef = firebase.database().ref('events/' + eventId);\n      eventRef.once('value', (snapshot) => {\n        if (snapshot.exists()) {\n          const event = snapshot.val();\n          // check if the user is the event's creator\n          if (event.creator === userName) {\n            // delete the event\n            eventRef.remove()\n              .then(() => {\n                resolve();\n              })\n              .catch((error) => {\n                console.error('Error deleting event:', error);\n                reject(error);\n              });\n          } else {\n            reject(new Error('User is not the event creator'));\n          }\n        } else {\n          reject(new Error('Event does not exist'));\n        }\n      });\n    });\n  }\n\n\n  static async getEventInfo(eventId) {\n    const eventSnapshot = await get(child(ref(this.database), `events/${eventId}`));\n    const eventInfo = eventSnapshot.val();\n  \n    if (eventInfo.privacy === \"Public\") {\n      const participantsSnapshot = await get(child(ref(this.database), `userNames`));\n      const participants = participantsSnapshot.val();\n      eventInfo.participants = participants;\n    } else {\n      const participantsSnapshot = await get(child(ref(this.database), `participantsOfEvent/${eventId}`));\n      const participants = participantsSnapshot.val();\n      eventInfo.participants = participants;\n    }\n  \n    eventInfo.id = eventId;\n  \n    return eventInfo;\n  }\n  \n  static async listenEventOptions(eventId,setState) {\n    onValue(ref(this.database, \"events/\" + eventId + \"/options\"), (snapshot) => {\n      const data = snapshot.val();\n      data.map((opt, index) => (opt[\"id\"] = index));\n      console.log(data);\n      setState(data);\n    });\n  }\n  static async setCustomDateOption(eventId,options,incomingOptions){\n    var index = options.length\n    \n    for(var i in [...Array(incomingOptions.length).keys()]){\n      console.log(i)\n      await set(ref(this.database,\"events/\" + eventId + \"/options/\" + `${index + (+i)}`),incomingOptions[i])\n    }\n\n    \n  }\n  static async getUserEventInfos(userName) {\n    // critical\n    let event_ids = Object.keys(\n      (await get(child(ref(this.database), `userEvents/${userName}`))).val()\n    );\n    let events_info = [];\n    event_ids.forEach((eventId) =>\n      events_info.push(this.getEventInfo(eventId))\n    );\n    ///events_info.forEach(event => console.log(event.title),\"asd\")\n    return events_info;\n  }\n\n  static async leaveEvent(eventId, username) {\n    set(\n      ref(this.database, \"participantsOfEvent/\" + eventId + \"/\" + username),\n      {}\n    );\n    set(ref(this.database, \"userEvents/\" + username + \"/\" + eventId), {});\n  }\n\n  static async endEvent(event_Id,optionId){\n     set(ref(this.database,\"events/\"+ event_Id + \"/isOpen\"),false);\n     set(ref(this.database,\"events/\"+ event_Id + \"/endOptionId\"),optionId);\n  }\n\n  static async submitVote(eventId, userName, votes) {\n    for (const date of Object.keys(votes)) {\n      console.log(`id : ${date} -> vote : ${votes[date]}`)\n      await set(\n        ref(\n          this.database,\n          \"participantsOfEvent/\" + eventId + \"/\" + userName + \"/\" + date\n        ),\n        votes[date]\n      );\n    }\n  }\n\n  static async getVotes(eventId) {\n    let votes = (\n      await get(child(ref(this.database), \"participantsOfEvent/\" + eventId))\n    ).val();\n    let comings = {};\n    let Ncomings = {};\n    let ifNeed = {};\n    for (const user of Object.keys(votes)) {\n      try {\n        votes[user].forEach((opt, index) => {\n          //console.log(opt,index);\n          switch (opt) {\n            case \"Coming\":\n              try {\n                comings[index].push(user);\n              } catch {\n                comings[index] = [user];\n              }\n\n              break;\n            case \"Not\":\n              try {\n                Ncomings[index].push(user);\n              } catch {\n                Ncomings[index] = [user];\n              }\n\n              break;\n            case \"If need\":\n              try {\n                ifNeed[index].push(user);\n              } catch {\n                ifNeed[index] = [user];\n              }\n          }\n        });\n      } catch {}\n    }\n\n    return { comings, Ncomings, ifNeed };\n  }\n}\n"]},"metadata":{},"sourceType":"module"}