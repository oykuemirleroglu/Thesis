{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VISIBLE_NUMBERS_PER_CIRCLE = exports.NUMBER_REGULAR_FONT_SIZE = exports.NUMBER_RADIUS_REGULAR = exports.NUMBER_OUTER_POSITION = exports.MODE = exports.MINUTES = exports.MERIDIEM = exports.INNER_NUMBER_RADIUS = exports.INNER_NUMBER_POSITIONING = exports.INITIAL_MINUTE_TRANSFORM = exports.INITIAL_HOUR_TRANSFORM = exports.HOUR_24_OUTER_FONT_SIZE = exports.HOUR_24_INNER_FONT_SIZE = exports.CLOCK_VALUES = exports.CLOCK_SIZE = exports.CLOCK_RADIUS = void 0;\nexports.getClockHandCirclePosition = getClockHandCirclePosition;\nexports.getClockHandCircleRadius = getClockHandCircleRadius;\nexports.getClockHandLength = getClockHandLength;\nexports.getOuterNumberPosition = getOuterNumberPosition;\nconst MINUTES = ['05', 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, '00'].map(a => a.toString());\nexports.MINUTES = MINUTES;\nconst MINUTES_60 = Array.from(Array(60), (_, i) => i.toString());\nconst HOURS_12 = Array.from(Array(12), (_, i) => (i + 1).toString());\nconst HOURS_24 = Array.from(Array(23), (_, i) => (i + 1).toString()).concat('00');\nlet MODE;\nexports.MODE = MODE;\n\n(function (MODE) {\n  MODE[\"MINUTES\"] = \"MINUTES\";\n  MODE[\"HOURS_12\"] = \"HOURS_12\";\n  MODE[\"HOURS_24\"] = \"HOURS_24\";\n})(MODE || (exports.MODE = MODE = {}));\n\nlet MERIDIEM;\n/*\n\t- increments is how many splits on clock, visible or invisible\n*/\n\nexports.MERIDIEM = MERIDIEM;\n\n(function (MERIDIEM) {\n  MERIDIEM[\"am\"] = \"am\";\n  MERIDIEM[\"pm\"] = \"pm\";\n})(MERIDIEM || (exports.MERIDIEM = MERIDIEM = {}));\n\nconst CLOCK_VALUES = {\n  [MODE.MINUTES]: {\n    increments: 60,\n    numbers: MINUTES,\n    dropdown: MINUTES_60\n  },\n  [MODE.HOURS_12]: {\n    increments: 12,\n    numbers: HOURS_12,\n    dropdown: HOURS_12\n  },\n  [MODE.HOURS_24]: {\n    increments: 12,\n    numbers: HOURS_24.slice(12),\n    numbersInner: HOURS_24.slice(0, 12),\n    dropdown: HOURS_24\n  }\n}; // number of actual numbers to display\n\nexports.CLOCK_VALUES = CLOCK_VALUES;\nconst VISIBLE_NUMBERS_PER_CIRCLE = 12; // radius of clock, in px\n\nexports.VISIBLE_NUMBERS_PER_CIRCLE = VISIBLE_NUMBERS_PER_CIRCLE;\nconst CLOCK_RADIUS = 110;\nexports.CLOCK_RADIUS = CLOCK_RADIUS;\nconst CLOCK_SIZE = CLOCK_RADIUS * 2;\n/*\n\tradius of invisible inner circle for 24 hour numbers\n\t- controls how far out the inner circle comes and\n\thow far in numbers come as well\n */\n\nexports.CLOCK_SIZE = CLOCK_SIZE;\nconst INNER_NUMBER_RADIUS = 77; // font sizes\n\nexports.INNER_NUMBER_RADIUS = INNER_NUMBER_RADIUS;\nconst NUMBER_REGULAR_FONT_SIZE = 16;\nexports.NUMBER_REGULAR_FONT_SIZE = NUMBER_REGULAR_FONT_SIZE;\nconst HOUR_24_INNER_FONT_SIZE = 15;\nexports.HOUR_24_INNER_FONT_SIZE = HOUR_24_INNER_FONT_SIZE;\nconst HOUR_24_OUTER_FONT_SIZE = 13; // size of circle surrounding individual numbers\n// loosely based on font sizes above\n\nexports.HOUR_24_OUTER_FONT_SIZE = HOUR_24_OUTER_FONT_SIZE;\nconst NUMBER_RADIUS_REGULAR = 34;\nexports.NUMBER_RADIUS_REGULAR = NUMBER_RADIUS_REGULAR;\nconst NUMBER_RADIUS_HOUR_24_OUTER = 32;\nconst NUMBER_RADIUS_HOUR_24_INNER = 28; // positioning of numbers\n\nconst NUMBER_OUTER_POSITION = 22;\nexports.NUMBER_OUTER_POSITION = NUMBER_OUTER_POSITION;\nconst NUMBER_OUTER_POSITION_24_HOUR = 18; // controls how far out to move numbers during 24h mode\n\nconst NUMBER_INNER_POSITION_24_HOUR = CLOCK_RADIUS - INNER_NUMBER_RADIUS + NUMBER_RADIUS_HOUR_24_INNER / 2;\n\nfunction getOuterNumberPosition(mode) {\n  return mode === MODE.HOURS_24 ? NUMBER_OUTER_POSITION_24_HOUR : NUMBER_OUTER_POSITION;\n} // initial position of hours/minutes before animating to final position\n\n\nconst INITIAL_HOUR_TRANSFORM = NUMBER_OUTER_POSITION - 32;\nexports.INITIAL_HOUR_TRANSFORM = INITIAL_HOUR_TRANSFORM;\nconst INITIAL_MINUTE_TRANSFORM = NUMBER_OUTER_POSITION + 28; // clock hand stuff\n\nexports.INITIAL_MINUTE_TRANSFORM = INITIAL_MINUTE_TRANSFORM;\n\nfunction getClockHandLength(mode, inner) {\n  if (mode !== MODE.HOURS_24) {\n    return NUMBER_OUTER_POSITION;\n  }\n\n  return inner ? NUMBER_INNER_POSITION_24_HOUR : NUMBER_OUTER_POSITION_24_HOUR;\n}\n\nfunction getClockHandCirclePosition(mode, inner) {\n  if (mode !== MODE.HOURS_24) {\n    return NUMBER_OUTER_POSITION;\n  }\n\n  return inner ? NUMBER_INNER_POSITION_24_HOUR : NUMBER_OUTER_POSITION_24_HOUR;\n}\n\nfunction getClockHandCircleRadius(mode, inner) {\n  if (mode !== MODE.HOURS_24) {\n    return NUMBER_RADIUS_REGULAR / 2;\n  }\n\n  return inner ? NUMBER_RADIUS_HOUR_24_INNER / 2 : NUMBER_RADIUS_HOUR_24_OUTER / 2;\n}\n\nconst animationChange = 22;\nconst INNER_NUMBER_POSITIONING = {\n  exit: NUMBER_INNER_POSITION_24_HOUR + animationChange,\n  enter: NUMBER_INNER_POSITION_24_HOUR\n};\nexports.INNER_NUMBER_POSITIONING = INNER_NUMBER_POSITIONING;","map":{"version":3,"sources":["C:/Users/Öykü/Desktop/CENG-416/node_modules/react-timekeeper/lib/helpers/constants.js"],"names":["Object","defineProperty","exports","value","VISIBLE_NUMBERS_PER_CIRCLE","NUMBER_REGULAR_FONT_SIZE","NUMBER_RADIUS_REGULAR","NUMBER_OUTER_POSITION","MODE","MINUTES","MERIDIEM","INNER_NUMBER_RADIUS","INNER_NUMBER_POSITIONING","INITIAL_MINUTE_TRANSFORM","INITIAL_HOUR_TRANSFORM","HOUR_24_OUTER_FONT_SIZE","HOUR_24_INNER_FONT_SIZE","CLOCK_VALUES","CLOCK_SIZE","CLOCK_RADIUS","getClockHandCirclePosition","getClockHandCircleRadius","getClockHandLength","getOuterNumberPosition","map","a","toString","MINUTES_60","Array","from","_","i","HOURS_12","HOURS_24","concat","increments","numbers","dropdown","slice","numbersInner","NUMBER_RADIUS_HOUR_24_OUTER","NUMBER_RADIUS_HOUR_24_INNER","NUMBER_OUTER_POSITION_24_HOUR","NUMBER_INNER_POSITION_24_HOUR","mode","inner","animationChange","exit","enter"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.VISIBLE_NUMBERS_PER_CIRCLE = exports.NUMBER_REGULAR_FONT_SIZE = exports.NUMBER_RADIUS_REGULAR = exports.NUMBER_OUTER_POSITION = exports.MODE = exports.MINUTES = exports.MERIDIEM = exports.INNER_NUMBER_RADIUS = exports.INNER_NUMBER_POSITIONING = exports.INITIAL_MINUTE_TRANSFORM = exports.INITIAL_HOUR_TRANSFORM = exports.HOUR_24_OUTER_FONT_SIZE = exports.HOUR_24_INNER_FONT_SIZE = exports.CLOCK_VALUES = exports.CLOCK_SIZE = exports.CLOCK_RADIUS = void 0;\nexports.getClockHandCirclePosition = getClockHandCirclePosition;\nexports.getClockHandCircleRadius = getClockHandCircleRadius;\nexports.getClockHandLength = getClockHandLength;\nexports.getOuterNumberPosition = getOuterNumberPosition;\nconst MINUTES = ['05', 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, '00'].map(a => a.toString());\nexports.MINUTES = MINUTES;\nconst MINUTES_60 = Array.from(Array(60), (_, i) => i.toString());\nconst HOURS_12 = Array.from(Array(12), (_, i) => (i + 1).toString());\nconst HOURS_24 = Array.from(Array(23), (_, i) => (i + 1).toString()).concat('00');\nlet MODE;\nexports.MODE = MODE;\n\n(function (MODE) {\n  MODE[\"MINUTES\"] = \"MINUTES\";\n  MODE[\"HOURS_12\"] = \"HOURS_12\";\n  MODE[\"HOURS_24\"] = \"HOURS_24\";\n})(MODE || (exports.MODE = MODE = {}));\n\nlet MERIDIEM;\n/*\n\t- increments is how many splits on clock, visible or invisible\n*/\n\nexports.MERIDIEM = MERIDIEM;\n\n(function (MERIDIEM) {\n  MERIDIEM[\"am\"] = \"am\";\n  MERIDIEM[\"pm\"] = \"pm\";\n})(MERIDIEM || (exports.MERIDIEM = MERIDIEM = {}));\n\nconst CLOCK_VALUES = {\n  [MODE.MINUTES]: {\n    increments: 60,\n    numbers: MINUTES,\n    dropdown: MINUTES_60\n  },\n  [MODE.HOURS_12]: {\n    increments: 12,\n    numbers: HOURS_12,\n    dropdown: HOURS_12\n  },\n  [MODE.HOURS_24]: {\n    increments: 12,\n    numbers: HOURS_24.slice(12),\n    numbersInner: HOURS_24.slice(0, 12),\n    dropdown: HOURS_24\n  }\n}; // number of actual numbers to display\n\nexports.CLOCK_VALUES = CLOCK_VALUES;\nconst VISIBLE_NUMBERS_PER_CIRCLE = 12; // radius of clock, in px\n\nexports.VISIBLE_NUMBERS_PER_CIRCLE = VISIBLE_NUMBERS_PER_CIRCLE;\nconst CLOCK_RADIUS = 110;\nexports.CLOCK_RADIUS = CLOCK_RADIUS;\nconst CLOCK_SIZE = CLOCK_RADIUS * 2;\n/*\n\tradius of invisible inner circle for 24 hour numbers\n\t- controls how far out the inner circle comes and\n\thow far in numbers come as well\n */\n\nexports.CLOCK_SIZE = CLOCK_SIZE;\nconst INNER_NUMBER_RADIUS = 77; // font sizes\n\nexports.INNER_NUMBER_RADIUS = INNER_NUMBER_RADIUS;\nconst NUMBER_REGULAR_FONT_SIZE = 16;\nexports.NUMBER_REGULAR_FONT_SIZE = NUMBER_REGULAR_FONT_SIZE;\nconst HOUR_24_INNER_FONT_SIZE = 15;\nexports.HOUR_24_INNER_FONT_SIZE = HOUR_24_INNER_FONT_SIZE;\nconst HOUR_24_OUTER_FONT_SIZE = 13; // size of circle surrounding individual numbers\n// loosely based on font sizes above\n\nexports.HOUR_24_OUTER_FONT_SIZE = HOUR_24_OUTER_FONT_SIZE;\nconst NUMBER_RADIUS_REGULAR = 34;\nexports.NUMBER_RADIUS_REGULAR = NUMBER_RADIUS_REGULAR;\nconst NUMBER_RADIUS_HOUR_24_OUTER = 32;\nconst NUMBER_RADIUS_HOUR_24_INNER = 28; // positioning of numbers\n\nconst NUMBER_OUTER_POSITION = 22;\nexports.NUMBER_OUTER_POSITION = NUMBER_OUTER_POSITION;\nconst NUMBER_OUTER_POSITION_24_HOUR = 18; // controls how far out to move numbers during 24h mode\n\nconst NUMBER_INNER_POSITION_24_HOUR = CLOCK_RADIUS - INNER_NUMBER_RADIUS + NUMBER_RADIUS_HOUR_24_INNER / 2;\n\nfunction getOuterNumberPosition(mode) {\n  return mode === MODE.HOURS_24 ? NUMBER_OUTER_POSITION_24_HOUR : NUMBER_OUTER_POSITION;\n} // initial position of hours/minutes before animating to final position\n\n\nconst INITIAL_HOUR_TRANSFORM = NUMBER_OUTER_POSITION - 32;\nexports.INITIAL_HOUR_TRANSFORM = INITIAL_HOUR_TRANSFORM;\nconst INITIAL_MINUTE_TRANSFORM = NUMBER_OUTER_POSITION + 28; // clock hand stuff\n\nexports.INITIAL_MINUTE_TRANSFORM = INITIAL_MINUTE_TRANSFORM;\n\nfunction getClockHandLength(mode, inner) {\n  if (mode !== MODE.HOURS_24) {\n    return NUMBER_OUTER_POSITION;\n  }\n\n  return inner ? NUMBER_INNER_POSITION_24_HOUR : NUMBER_OUTER_POSITION_24_HOUR;\n}\n\nfunction getClockHandCirclePosition(mode, inner) {\n  if (mode !== MODE.HOURS_24) {\n    return NUMBER_OUTER_POSITION;\n  }\n\n  return inner ? NUMBER_INNER_POSITION_24_HOUR : NUMBER_OUTER_POSITION_24_HOUR;\n}\n\nfunction getClockHandCircleRadius(mode, inner) {\n  if (mode !== MODE.HOURS_24) {\n    return NUMBER_RADIUS_REGULAR / 2;\n  }\n\n  return inner ? NUMBER_RADIUS_HOUR_24_INNER / 2 : NUMBER_RADIUS_HOUR_24_OUTER / 2;\n}\n\nconst animationChange = 22;\nconst INNER_NUMBER_POSITIONING = {\n  exit: NUMBER_INNER_POSITION_24_HOUR + animationChange,\n  enter: NUMBER_INNER_POSITION_24_HOUR\n};\nexports.INNER_NUMBER_POSITIONING = INNER_NUMBER_POSITIONING;"]},"metadata":{},"sourceType":"script"}